version: '3.3'
networks:
  web:
    external: true

services:

  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    networks:
      - web
    env_file: .env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres@adm
      PGDATA: /var/lib/pgdata
      SCHEMA: public
    ports:
      - "${GITLAB_POSTGRES_PORT}:5432"
    volumes:
      - '${PWD}/volumes/postgres/data:/var/lib/pgdata'
      - '${PWD}/initdb.sh:/docker-entrypoint-initdb.d/initdb.sh'

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    restart: always
    networks:
      - web
    env_file: .env
    command:
      - --loglevel warning
    volumes:
      - ./volumes/redis:/var/lib/redis
    restart: always

  gitlab:
    image: gitlab/gitlab-ce:${GITLAB_VERSION}-ce.0
    container_name: gitlab
    networks:
      - web
    env_file: .env
    ports:
      - "${GITLAB_HTTP_PORT}:${GITLAB_HTTP_PORT}"
      - "${GITLAB_PAGES_HTTP_PORT}:${GITLAB_PAGES_HTTP_PORT}"
      #- "${GITLAB_REGISTRY_HTTP_PORT}:${GITLAB_REGISTRY_HTTP_PORT}"
      #- "${GITLAB_SSH_PORT}:22"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url "http://gitlab.${DOMAIN_NAME}"
        nginx['listen_port'] = ${GITLAB_HTTP_PORT}
        nginx['listen_https'] = false
        nginx['custom_gitlab_server_config'] = "location /.well-known/acme-challenge/ {\n root /var/opt/gitlab/nginx/www/; \n}\n"
        nginx['proxy_set_headers'] = {"X-Forwarded-Proto" => "https","X-Forwarded-Ssl" => "on"}
        ################################################################################
        ## Container Registry settings
        ##! Docs: https://docs.gitlab.com/ce/administration/container_registry.html
        ################################################################################
        registry_external_url 'http://registry.${DOMAIN_NAME}'
        ################################################################################
        ## GitLab Pages
        ##! Docs: https://docs.gitlab.com/ce/pages/administration.html
        ################################################################################
        pages_external_url 'http://pages.${DOMAIN_NAME}'
        gitlab_pages['inplace_chroot'] = true
        ################################################################################
        ## GitLab Mattermost
        ##! Docs: https://docs.gitlab.com/omnibus/gitlab-mattermost
        ################################################################################
        mattermost_external_url 'http://mattermost.${DOMAIN_NAME}' 
        #pages_nginx['proxy_set_headers'] = {"X-Forwarded-Proto" => "https","X-Forwarded-Ssl" => "on"}
        #registry_external_url 'http://registry.wisecoding.io'
        #gitlab_rails['registry_enabled'] = true
        #registry['enable'] = true
        #registry_nginx['enable'] = true
        #registry_nginx['listen_port'] = 18082
        #registry_nginx['listen_https'] = false
        #registry_nginx['proxy_set_headers'] = {"X-Forwarded-Proto" => "https","X-Forwarded-Ssl" => "on"}
        letsencrypt['enable'] = false
        postgresql['enable'] = false
        gitlab_rails['db_adapter'] = 'postgresql'
        gitlab_rails['db_encoding'] = 'utf8'
        gitlab_rails['db_host'] = 'postgres'
        gitlab_rails['db_port'] = 5432
        gitlab_rails['db_username'] = '${GITLAB_POSTGRES_USERNAME}'
        gitlab_rails['db_password'] = '${GITLAB_POSTGRES_PASSWORD}'
        gitlab_rails['db_database'] = '${GITLAB_POSTGRES_DATABASE}'
        redis['enable'] = false
        gitlab_rails['redis_host'] = 'redis'
        gitlab_rails['redis_database'] = 8
        gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
        gitlab_rails['gitlab_shell_ssh_port'] = 22
        gitlab_rails['rack_attack_git_basic_auth'] = { 'enabled' => false, }
        gitlab_rails['smtp_enable'] = true
        gitlab_rails['smtp_address'] = "${GITLAB_SMTP_SERVER}"
        gitlab_rails['smtp_port'] = ${GITLAB_SMTP_PORT:-465}
        gitlab_rails['smtp_user_name'] = "${GITLAB_SMTP_USERNAME}"
        gitlab_rails['smtp_password'] = "${GITLAB_SMTP_PASSWORD}"
        gitlab_rails['gitlab_email_from'] = "${GITLAB_EMAIL_FROM}"
        gitlab_rails['gitlab_email_reply_to'] = "${GITLAB_EMAIL_NOREPLY}"
        gitlab_rails['smtp_domain'] = "${GITLAB_EMAIL_DOMAIN}"
        gitlab_rails['smtp_authentication'] = "login"
        gitlab_rails['smtp_enable_starttls_auto'] = true
        gitlab_rails['smtp_tls'] = true
        gitlab_rails['smtp_openssl_verify_mode'] = 'none'
        gitlab_rails['backup_keep_time'] = 604800
        postgresql['shared_buffers'] = "256MB"
        unicorn['worker_processes'] = 4
        prometheus_monitoring['enable'] = false
    volumes:
      - ${PWD}/volumes/gitlab/config:/etc/gitlab
      - ${PWD}/volumes/gitlab/data:/var/opt/gitlab
      - ${PWD}/volumes/gitlab/logs:/var/log/gitlab
    depends_on:
      - redis
      - postgres
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      # gitlab configs
      - "traefik.http.routers.gitlab-http.rule=Host(`gitlab.${DOMAIN_NAME}`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.gitlab-http.service=gitlab"
      - "traefik.http.routers.gitlab-http.entrypoints=http" # <== Defining the entrypoint for http, **ref: traefik docker-compose
      - "traefik.http.routers.gitlab-http.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.gitlab-https.service=gitlab"
      - "traefik.http.routers.gitlab-https.rule=Host(`gitlab.${DOMAIN_NAME}`)" # <== Your Domain Name for the https rule 
      - "traefik.http.routers.gitlab-https.entrypoints=https" # <== Defining entrypoint for https, **ref: traefik docker-compose
      - "traefik.http.routers.gitlab-https.tls.certresolver=omega_httpchallenge" # <== Defining certsresolvers for https
      - "traefik.http.services.gitlab.loadbalancer.server.port=${GITLAB_HTTP_PORT}"
      - "traefik.http.routers.pages-http.rule=Host(`pages.${DOMAIN_NAME}`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.pages-http.service=pages"
      - "traefik.http.routers.pages-http.entrypoints=http" # <== Defining the entrypoint for http, **ref: traefik docker-compose
      - "traefik.http.routers.pages-http.middlewares=redirect@file" # <== This is a middleware to redirect to https
      - "traefik.http.routers.pages-https.service=pages"
      - "traefik.http.routers.pages-https.rule=Host(`pages.${DOMAIN_NAME}`)" # <== Your Domain Name for the https rule 
      - "traefik.http.routers.pages-https.entrypoints=https" # <== Defining entrypoint for https, **ref: traefik docker-compose
      - "traefik.http.routers.pages-https.tls.certresolver=omega_httpchallenge" # <== Defining certsresolvers for https
      - "traefik.http.services.pages.loadbalancer.server.port=${GITLAB_HTTP_PORT}"

  #gitlab-runner1:
  #  image: gitlab/gitlab-runner:alpine-v${GITLAB_VERSION}
  #  volumes: 
  #    - "${PWD}/volumes/gitlab/configs/runner1:/etc/gitlab-runner:Z"
  #    - "/var/run/docker.sock:/var/run/docker.sock"
  #gitlab-runner2:
  #  image: gitlab/gitlab-runner:alpine-v${GITLAB_VERSION}
  #  volumes:
  #    - "${PWD}/volumes/gitlab/configs/runner2:/etc/gitlab-runner:Z"
  #    - "/var/run/docker.sock:/var/run/docker.sock"
  #gitlab-runner3:
  #  image: gitlab/gitlab-runner:alpine-v${GITLAB_VERSION}
  #  volumes:
  #    - "${PWD}/volumes/gitlab/configs/runner3:/etc/gitlab-runner:Z"
  #    - "/var/run/docker.sock:/var/run/docker.sock"

